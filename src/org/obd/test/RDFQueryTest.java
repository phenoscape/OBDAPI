package org.obd.test;

import org.obd.model.bridge.RDFQuery;
import org.obd.query.AnnotationLinkQueryTerm;
import org.obd.query.BooleanQueryTerm;
import org.obd.query.LinkQueryTerm;
import org.obd.query.QueryTerm;
import org.obd.model.Node;
import org.purl.obo.vocab.RelationVocabulary;

/**
 * tests the OBD QueryTerm to SPARQL bridge
 * 
 * @author cjm
 * @see RDFQuery
 * @see LinkQueryTerm
 */
public class RDFQueryTest extends AbstractOBDTest {
	
	
	
	public RDFQueryTest(String n) {
		super(n);
	}

	public void setUp() throws Exception {
		System.out.println("Setting up: " + this);
		//getShard();
		initLogger();
	}

	/**
	 * generates SPARQL for various standard OBD queries
	 */
	public void testWriteRDF() {

		runQuery(new LinkQueryTerm(relationVocabulary.is_a(),NEURON), "subclass");

		runQuery(new LinkQueryTerm(MELANOCYTE),"any link");
		
		runQuery(new LinkQueryTerm(relationVocabulary.part_of(),MELANOCYTE),"part_of (class)");
		
		runQuery(new LinkQueryTerm(relationVocabulary.inheres_in(),	new LinkQueryTerm(relationVocabulary.part_of(),HUMAN_EYE)),"phenotype in some part of the eye");
		
		runQuery(new AnnotationLinkQueryTerm(MELANOCYTE),"anything annotated to melanocyte");
		
		runQuery(new AnnotationLinkQueryTerm(new LinkQueryTerm(relationVocabulary.inheres_in(),	MELANOCYTE)),"anything annotated to a melanocyte phenotype");
		
		QueryTerm classQt =	new BooleanQueryTerm(new LinkQueryTerm(relationVocabulary.inheres_in(),NEURON),	new LinkQueryTerm(relationVocabulary.inheres_in(),BEHAVIOR));
		
		runQuery(new AnnotationLinkQueryTerm(classQt),"boolean query");


	}
	
	/**
	 * given an OBD Query object, translate it to SPARQL and write the results.
	 * Normally the client code would not do this - it would pass the query object directly to the Shard, and the Shard
	 * would delegate the call to Jena / a triplestore
	 * @param qt
	 */
	private void runQuery(QueryTerm qt, String name) {
		qt.setInferred(false);
		RDFQuery q = new RDFQuery(qt);
		System.out.println("=== "+name+" ===\n* OBD Query:\n  "+qt);
		System.out.println("\n* Autogenerated SPARQL:\n  "+q.toSPARQL()+"\n\n");
		for (Node n : this.shard.getNodesByQuery(qt)){
			System.out.println("Node: " + n.toString());
		}
	
	}

}
