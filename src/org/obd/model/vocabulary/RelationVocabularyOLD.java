package org.obd.model.vocabulary;

/**
 * For retrieving identifiers for various relations. @see <a href="http://obofoundry.org/ro">Relation Ontology</a>
 * <p>
 * The primary purpose of this class is to make the relation vocabulary visible at
 * the java level for the purposes of compile-time code checking, and to integrate the
 * ontology documentation with the java documentation
 * @deprecated
 * @author cjm
 *
 */
public class RelationVocabularyOLD {

	public RelationVocabularyOLD() {
		super();
	}

	private String generateId(String local) {
		return "OBO_REL:"+local;
	}
    // AUTO-GENERATED BY org.obo.util.CodeGenUtil

    /**
     * For continuants: C is_a C' if and only if: given any c that instantiates C at a time t, c instantiates C' at t. For processes: P is_a P' if and only if: that given any p that instantiates P, then p instantiates P'. 
     * <p>
     * The is_a relationship is considered axiomatic by the obo file format specification. In the representation of obo in OWL, where obo terms are represented as OWL classes, is_a is mapped on to the subClassOf axiom 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_is_a">OBO_REL:is_a</a> 
     */
    public String is_a() {
        return generateId("is_a");
    }

    /**
     * For continuants: C part_of C' if and only if: given any c that instantiates C at a time t, there is some c' such that c' instantiates C' at time t, and c *part_of* c' at t. For processes: P part_of P' if and only if: given any p that instantiates P at a time t, there is some p' such that p' instantiates P' at time t, and p *part_of* p' at t. (Here *part_of* is the instance-level part-relation.) 
     * <p>
     * Parthood as a relation between instances: The primitive instance-level relation p part_of p1 is illustrated in assertions such as: this instance of rhodopsin mediated phototransduction part_of this instance of visual perception.    This relation satisfies at least the following standard axioms of mereology: reflexivity (for all p, p part_of p); anti-symmetry (for all p, p1, if p part_of p1 and p1 part_of p then p and p1 are identical); and transitivity (for all p, p1, p2, if p part_of p1 and p1 part_of p2, then p part_of p2). Analogous axioms hold also for parthood as a relation between spatial regions.    For parthood as a relation between continuants, these axioms need to be modified to take account of the incorporation of a temporal argument. Thus for example the axiom of transitivity for continuants will assert that if c part_of c1 at t and c1 part_of c2 at t, then also c part_of c2 at t.    Parthood as a relation between classes: To define part_of as a relation between classes we again need to distinguish the two cases of continuants and processes, even though the explicit reference to instants of time now falls away. For continuants, we have C part_of C1 if and only if any instance of C at any time is an instance-level part of some instance of C1 at that time, as for example in: cell nucleus part_ of cell. 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_part_of">OBO_REL:part_of</a> 
     */
    public String part_of() {
        return generateId("part_of");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_part">OBO_REL:has_part</a> 
     */
    public String has_part() {
        return generateId("has_part");
    }

    /**
     * C integral_part_of C' if and only if: C part_of C' AND C' has_part C 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_integral_part_of">OBO_REL:integral_part_of</a> 
     */
    public String integral_part_of() {
        return generateId("integral_part_of");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_integral_part">OBO_REL:has_integral_part</a> 
     */
    public String has_integral_part() {
        return generateId("has_integral_part");
    }

    /**
     * As for part_of, with the additional constraint that subject and object are distinct 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_proper_part_of">OBO_REL:proper_part_of</a> 
     */
    public String proper_part_of() {
        return generateId("proper_part_of");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_proper_part">OBO_REL:has_proper_part</a> 
     */
    public String has_proper_part() {
        return generateId("has_proper_part");
    }

    /**
     * C located_in C' if and only if: given any c that instantiates C at a time t, there is some c' such that: c' instantiates C' at time t and c *located_in* c'. (Here *located_in* is the instance-level location relation.) 
     * <p>
     * Location as a relation between instances: The primitive instance-level relation c located_in r at t reflects the fact that each continuant is at any given time associated with exactly one spatial region, namely its exact location. Following we can use this relation to define a further instance-level location relation - not between a continuant and the region which it exactly occupies, but rather between one continuant and another. c is located in c1, in this sense, whenever the spatial region occupied by c is part_of the spatial region occupied by c1.    Note that this relation comprehends both the relation of exact location between one continuant and another which obtains when r and r1 are identical (for example, when a portion of fluid exactly fills a cavity), as well as those sorts of inexact location relations which obtain, for example, between brain and head or between ovum and uterus 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_located_in">OBO_REL:located_in</a> 
     */
    public String located_in() {
        return generateId("located_in");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_location_of">OBO_REL:location_of</a> 
     */
    public String location_of() {
        return generateId("location_of");
    }

    /**
     * C contained_in C' if and only if: given any instance c that instantiates C at a time t, there is some c' such that: c' instantiates C' at time t and c located_in c' at t, and it is not the case that c *overlaps* c' at t. (c' is a conduit or cavity.) 
     * <p>
     * Containment obtains in each case between material and immaterial continuants, for instance: lung contained_in thoracic cavity; bladder contained_in pelvic cavity. Hence containment is not a transitive relation.    If c part_of c1 at t then we have also, by our definition and by the axioms of mereology applied to spatial regions, c located_in c1 at t. Thus, many examples of instance-level location relations for continuants are in fact cases of instance-level parthood. For material continuants location and parthood coincide. Containment is location not involving parthood, and arises only where some immaterial continuant is involved. To understand this relation, we first define overlap for continuants as follows:    c1 overlap c2 at t =def for some c, c part_of c1 at t and c part_of c2 at t. The containment relation on the instance level can then be defined (see definition): 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_contained_in">OBO_REL:contained_in</a> 
     */
    public String contained_in() {
        return generateId("contained_in");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_contains">OBO_REL:contains</a> 
     */
    public String contains() {
        return generateId("contains");
    }

    /**
     * C adjacent to C' if and only if: given any instance c that instantiates C at a time t, there is some c' such that: c' instantiates C' at time t and c and c' are in spatial proximity 
     * <p>
     * Note that adjacent_to as thus defined is not a symmetric relation, in contrast to its instance-level counterpart. For it can be the case that Cs are in general such as to be adjacent to instances of C1 while no analogous statement holds for C1s in general in relation to instances of C. Examples are: nuclear membrane adjacent_to cytoplasm; seminal vesicle adjacent_to urinary bladder; ovary adjacent_to parietal pelvic peritoneum 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_adjacent_to">OBO_REL:adjacent_to</a> 
     */
    public String adjacent_to() {
        return generateId("adjacent_to");
    }

    /**
     * Relation between two classes, in which instances retain their identity yet change their classification by virtue of some kind of transformation. Formally: C transformation_of C' if and only if given any c and any t, if c instantiates C at time t, then for some t', c instantiates C' at t' and t' earlier t, and there is no t2 such that c instantiates C at t2 and c instantiates C' at t2. 
     * <p>
     * When an embryonic oenocyte (a type of insect cell) is transformed into a larval oenocyte, one and the same continuant entity preserves its identity while instantiating distinct classes at distinct times. The class-level relation transformation_of obtains between continuant classes C and C1 wherever each instance of the class C is such as to have existed at some earlier time as an instance of the distinct class C1 (see Figure 2 in paper). This relation is illustrated first of all at the molecular level of granularity by the relation between mature RNA and the pre-RNA from which it is processed, or between (UV-induced) thymine-dimer and thymine dinucleotide. At coarser levels of granularity it is illustrated by the transformations involved in the creation of red blood cells, for example, from reticulocyte to erythrocyte, and by processes of development, for example, from larva to pupa, or from (post-gastrular) embryo to fetus or from child to adult. It is also manifest in pathological transformations, for example, of normal colon into carcinomatous colon. In each such case, one and the same continuant entity instantiates distinct classes at different times in virtue of phenotypic changes. 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_transformation_of">OBO_REL:transformation_of</a> 
     */
    public String transformation_of() {
        return generateId("transformation_of");
    }

    /**
     * Derivation on the instance level (*derives_from*) holds between distinct material continuants when one succeeds the other across a temporal divide in such a way that at least a biologically significant portion of the matter of the earlier continuant is inherited by the later. We say that one class C derives_from class C' if instances of C are connected to instances of C' via some chain of instance-level derivation relations. Example: osteocyte derives_from osteoblast. Formally: C derives_immediately_from C' if and only if: given any c and any t, if c instantiates C at time t, then there is some c' and some t', such that c' instantiates C' at t' and t' earlier-than t and c *derives_from* c'. C derives_from C' if and only if: there is an chain of immediate derivation relations connecting C to C'. 
     * <p>
     * Derivation as a relation between instances. The temporal relation of derivation is more complex. Transformation, on the instance level, is just the relation of identity: each adult is identical to some child existing at some earlier time. Derivation on the instance-level is a relation holding between non-identicals. More precisely, it holds between distinct material continuants when one succeeds the other across a temporal divide in such a way that at least a biologically significant portion of the matter of the earlier continuant is inherited by the later. Thus we will have axioms to the effect that from c derives_from c1 we can infer that c and c1 are not identical and that there is some instant of time t such that c1 exists only prior to and c only subsequent to t. We will also be able to infer that the spatial region occupied by c as it begins to exist at t overlaps with the spatial region occupied by c1 as it ceases to exist in the same instant. 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_derives_from">OBO_REL:derives_from</a> 
     */
    public String derives_from() {
        return generateId("derives_from");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_derived_into">OBO_REL:derived_into</a> 
     */
    public String derived_into() {
        return generateId("derived_into");
    }

    /**
     * P preceded_by P' if and only if: given any process p that instantiates P at a time t, there is some process p' such that p' instantiates P' at time t', and t' is earlier than t.  
     * <p>
     * An example is: translation preceded_by transcription; aging preceded_by development (not however death preceded_by aging). Where derives_from links classes of continuants, preceded_by links classes of processes. Clearly, however, these two relations are not independent of each other. Thus if cells of type C1 derive_from cells of type C, then any cell division involving an instance of C1 in a given lineage is preceded_by cellular processes involving an instance of C.    The assertion P preceded_by P1 tells us something about Ps in general: that is, it tells us something about what happened earlier, given what we know about what happened later. Thus it does not provide information pointing in the opposite direction, concerning instances of P1 in general; that is, that each is such as to be succeeded by some instance of P. Note that an assertion to the effect that P preceded_by P1 is rather weak; it tells us little about the relations between the underlying instances in virtue of which the preceded_by relation obtains. Typically we will be interested in stronger relations, for example in the relation immediately_preceded_by, or in relations which combine preceded_by with a condition to the effect that the corresponding instances of P and P1 share participants, or that their participants are connected by relations of derivation, or (as a first step along the road to a treatment of causality) that the one process in some way affects (for example, initiates or regulates) the other. 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_preceded_by">OBO_REL:preceded_by</a> 
     */
    public String preceded_by() {
        return generateId("preceded_by");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_precedes">OBO_REL:precedes</a> 
     */
    public String precedes() {
        return generateId("precedes");
    }

    /**
     * P has_participant C if and only if: given any process p that instantiates P there is some continuant c, and some time t, such that: c instantiates C at t and c participates in p at t 
     * <p>
     * Has_participant is a primitive instance-level relation between a process, a continuant, and a time at which the continuant participates in some way in the process. The relation obtains, for example, when this particular process of oxygen exchange across this particular alveolar membrane has_participant this particular sample of hemoglobin at this particular time. 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_participant">OBO_REL:has_participant</a> 
     */
    public String has_participant() {
        return generateId("has_participant");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_participates_in">OBO_REL:participates_in</a> 
     */
    public String participates_in() {
        return generateId("participates_in");
    }

    /**
     * As for has_participant, but with the additional condition that the component instance is causally active in the relevant process 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_agent">OBO_REL:has_agent</a> 
     */
    public String has_agent() {
        return generateId("has_agent");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_agent_in">OBO_REL:agent_in</a> 
     */
    public String agent_in() {
        return generateId("agent_in");
    }

    /**
     * A relation between an instance and a class. For components: a primitive relation between a component instance and a class which it instantiates at a specific time. For processes: a primitive relation, between a process instance and a class which it instantiates, holding independently of time 
     * <p>
     * The instance_of relationship is considered axiomatic by the obo file format specification; ie it is taken for granted. The is_a relation is still included in this ontology for completeness 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_instance_of">OBO_REL:instance_of</a> 
     */
    public String instance_of() {
        return generateId("instance_of");
    }

    /**
     * A relation between a dependent continuant D and an entity E. D inheres_in E iff: given any d that instantiates D at t, there exists some e that instantiates E at t and d *inheres_in* e at t. Here *inheres_in* is the primitive instance level relation. 
     * <p>
     * This relation links qualities, functions, dispositions and other dependent continuants to their bearers. Examples: A particular shape that inheres in a lung; The redness that ineres in a Drosophila eye; Catalytic activity function inheres_in catalytic molecule. Note that inherence is a functional relation: if x inheres_in y at t and x inheres_in z at t, then y=z. We leave open the possibility of a relation multiply_inheres_in, such as between a gene sequence and the multiple chromosomes it multiply inheres in. The super-relation of both inheres_in and multiply_inheres_in would be depends_on 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_inheres_in">OBO_REL:inheres_in</a> 
     */
    public String inheres_in() {
        return generateId("inheres_in");
    }

    /**
     * A relation between an entity and a dependent continuant; the reciprocal relation of inheres_in 
     * <p>
     * Examples: red eye bearer_of redness 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_bearer_of">OBO_REL:bearer_of</a> 
     */
    public String bearer_of() {
        return generateId("bearer_of");
    }

    /**
     * A relation between a quality Q and an entity E. Q quality_of E iff: Q inheres_in E and Q is a quality 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_quality_of">OBO_REL:quality_of</a> 
     */
    public String quality_of() {
        return generateId("quality_of");
    }

    /**
     * A relation between an entity and a quality. For types: E has_quality Q iff: for any eEt, exists qQt such that q inheres_in e at t. For instances: e has_quality q at t iff q inheres_in e at t and q instance-of Quality 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_quality">OBO_REL:has_quality</a> 
     */
    public String has_quality() {
        return generateId("has_quality");
    }

    /**
     * A relation between a function F and an entity E. F function_of E iff: Q inheres_in E and Q is a function 
     * <p>
     * Example: 'to blood pump' function_of 'heart' 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_function_of">OBO_REL:function_of</a> 
     */
    public String function_of() {
        return generateId("function_of");
    }

    /**
     * Relation between an independent continuant and a function. 
     * <p>
     * heart has_function to-pump-blood 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_function">OBO_REL:has_function</a> 
     */
    public String has_function() {
        return generateId("has_function");
    }

    /**
     * A relation between a role R and an entity E. R role_of E iff: R inheres_in E and R is a role 
     * <p>
     * Example: 'to blood pump' function_of 'heart' 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_role_of">OBO_REL:role_of</a> 
     */
    public String role_of() {
        return generateId("role_of");
    }

    /**
     * A relation between a continuant C and a role R. The reciprocal relation of role_of. 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_role">OBO_REL:has_role</a> 
     */
    public String has_role() {
        return generateId("has_role");
    }

    /**
     * Relation between a process and a function, where the unfolding of the process requires the execution of the function. Class level: P realizes F iff: given any p that instantiates P, there exists some f, t such that f instantiates F at t and p *realizes* f. Here, *realizes* is the primitive instance level relation 
     * <p>
     * The process of 'histidine catabolism' (GO:0006548) realizes the function 'histidine ammonia lyase activity' (GO:0004397) (note: here 'activity' denotes a function and not a process). We leave open the possibility of defining in future the sub-relations directly_realizes (as bewteen a function and it's functioning) and indirectly_realizes 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_realizes">OBO_REL:realizes</a> 
     */
    public String realizes() {
        return generateId("realizes");
    }

    /**
     * Relation between a function and a process. Reciprocal relation of realizes 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_realized_by">OBO_REL:realized_by</a> 
     */
    public String realized_by() {
        return generateId("realized_by");
    }

    /**
     * A relation between a relational quality and an entity type. Q towards E iff: for any qQt, q towards E at t.  
     * <p>
     * Examples: sensitivity towards chlorine; the PATO:concentration of a liquid with respect to some chemical entity type 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_towards">OBO_REL:towards</a> 
     */
    public String towards() {
        return generateId("towards");
    }

    /**
     * A relation between two continuants, C and D. C develops_from D if C derived_from D or C transformation_of D. On the class level: C develops from D if and only if, for any x and any time t, the following holds: if x instantiates C at time t, then 1. either for some time t1, x instantiates D at t1 and t1 precedes t, and there is no time interval t2 such that x instantiates C at t2 and x instantiates D at t2 ; 2. or for some time t1 , there is some y such that y instantiates D at t1 and x derived_from y. On the instance level: x develops_from y is indistinguishable from x derives_from y 
     * <p>
     * Examples: eye develops_from eye disc; erythrocyte develops_from reticulocyte. Note that ontologies should use either derives_from or transformation_of where appropriate, but the develops_from relation can be used where one does not want to differentiate between these 2 cases 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_develops_from">OBO_REL:develops_from</a> 
     */
    public String develops_from() {
        return generateId("develops_from");
    }

    /**
     * A relation between an organism and a quality or collection of qualities, such that those qualities are influenced in whole or part by the expression of genes in that organism. The qualities may inhere in (a) the organism itself, (b) parts of that organism, (c) entities derived from that organism, or (d) entities in the environment under the influence of the organism. Instance level: c has_phenotype q iff: exists t such that c has_part_or_derivative p at t and p has_quality q at t. For types: C has_phenotype Q iff: for any cCt, exists qQt such that q inheres_in c at t. Here, c has_part_or_derivative p at t means that c has_part(reflexive) p at t, or p derives_from c or some part_of c, or p arises through the actions of c 
     * <p>
     * Human has_phenotype shape-of-skull; Spider has_phenotype structure-of-web 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_phenotype">OBO_REL:has_phenotype</a> 
     */
    public String has_phenotype() {
        return generateId("has_phenotype");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_multiply_inheres_in">OBO_REL:multiply_inheres_in</a> 
     */
    public String multiply_inheres_in() {
        return generateId("multiply_inheres_in");
    }

    /**
     * A relation between an entity instance and a dependent entity type. 
     * <p>
     * see Neuhaus et al Substances, Qualitiies Universals 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_exemplifies">OBO_REL:exemplifies</a> 
     */
    public String exemplifies() {
        return generateId("exemplifies");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_disposition">OBO_REL:has_disposition</a> 
     */
    public String has_disposition() {
        return generateId("has_disposition");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_disposition_of">OBO_REL:disposition_of</a> 
     */
    public String disposition_of() {
        return generateId("disposition_of");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_lacks_part">OBO_REL:lacks_part</a> 
     */
    public String lacks_part() {
        return generateId("lacks_part");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_connected_to">OBO_REL:connected_to</a> 
     */
    public String connected_to() {
        return generateId("connected_to");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_surrounded_by">OBO_REL:surrounded_by</a> 
     */
    public String surrounded_by() {
        return generateId("surrounded_by");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_surrounds">OBO_REL:surrounds</a> 
     */
    public String surrounds() {
        return generateId("surrounds");
    }

    /**
     * Relation between a function and a continuant. F executed_in C iff forall p such that p realizes F, p unfolds_in some c, where c is an instance of C throughout p 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_executed_in">OBO_REL:executed_in</a> 
     */
    public String executed_in() {
        return generateId("executed_in");
    }

    /**
     *  
     * <p>
     * get def from CARO chapter 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_time_restricted_part_of">OBO_REL:time_restricted_part_of</a> 
     */
    public String time_restricted_part_of() {
        return generateId("time_restricted_part_of");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_arises_from">OBO_REL:arises_from</a> 
     */
    public String arises_from() {
        return generateId("arises_from");
    }

    /**
     *  
     * <p>
     * not inverse of precedes? 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_succeeds">OBO_REL:succeeds</a> 
     */
    public String succeeds() {
        return generateId("succeeds");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_buds_from">OBO_REL:buds_from</a> 
     */
    public String buds_from() {
        return generateId("buds_from");
    }

    /**
     * p1 simultaneous_with p1 iff start_of(p1) = start_of2(p2) & end_of(p1) = end_of(p2) 
     * <p>
     * Examples: 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_simultaneous_with">OBO_REL:simultaneous_with</a> 
     */
    public String simultaneous_with() {
        return generateId("simultaneous_with");
    }

    /**
     * c exists_during p iff exists(t) & c exists-at t & start_of(p) <= t & t <= end_of(p) 
     * <p>
     * Examples: 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_exists_during">OBO_REL:exists_during</a> 
     */
    public String exists_during() {
        return generateId("exists_during");
    }

    /**
     * p starts_during s iff start_of(s) <= start_of(p) & start_of(p) <= end_of(s) 
     * <p>
     * Examples (continuants): neural_tube starts_during Segmentation; Examples (processes): neural_tube_development starts_during Segmentation 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_starts_during">OBO_REL:starts_during</a> 
     */
    public String starts_during() {
        return generateId("starts_during");
    }

    /**
     * p ends_during s iff start_of(s) <= end_of(p) & end_of(p) <= end_of(s) 
     * <p>
     * Examples (continuants): neural_tube ends_during Pharyngula; Examples (processes): neural_tube_development ends_during Pharyngula 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_ends_during">OBO_REL:ends_during</a> 
     */
    public String ends_during() {
        return generateId("ends_during");
    }

    /**
     * p happens_during s iff start_of(s) <= start_of(p) & end_of(p) <= end_of(s) 
     * <p>
     * Examples: formation of primary germ layer happens_during gastrulation 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_happens_during">OBO_REL:happens_during</a> 
     */
    public String happens_during() {
        return generateId("happens_during");
    }

    /**
     * p1 begins_at_end_of p2 iff end_of(p2) = start_of(p1) 
     * <p>
     * we already have preceded_by - this would just appear to be immediately_preceded_by? 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_begins_at_end_of">OBO_REL:begins_at_end_of</a> 
     */
    public String begins_at_end_of() {
        return generateId("begins_at_end_of");
    }

    /**
     * p1 ends_at_beginning_of p2 iff end_of(p1) = start_of(p2) 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_ends_at_beginning_of">OBO_REL:ends_at_beginning_of</a> 
     */
    public String ends_at_beginning_of() {
        return generateId("ends_at_beginning_of");
    }

    /**
     * p starts_during_or_after s iff start_of(s) <= start_of(p) 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_starts_during_or_after">OBO_REL:starts_during_or_after</a> 
     */
    public String starts_during_or_after() {
        return generateId("starts_during_or_after");
    }

    /**
     * p ends_before_end_of s iff end_of(p) <= end_of(s) 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_ends_during_or_before">OBO_REL:ends_during_or_before</a> 
     */
    public String ends_during_or_before() {
        return generateId("ends_during_or_before");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_starts_earlier_than">OBO_REL:starts_earlier_than</a> 
     */
    public String starts_earlier_than() {
        return generateId("starts_earlier_than");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_ends_earlier_than">OBO_REL:ends_earlier_than</a> 
     */
    public String ends_earlier_than() {
        return generateId("ends_earlier_than");
    }

    /**
     *  
     * <p>
     * mutated gene influences morphology; anxiety influences thigmotaxis 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBOL#OBOL_influences">OBOL:influences</a> 
     */
    public String influences() {
        return generateId("influences");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBOL#OBOL_influenced_by">OBOL:influenced_by</a> 
     */
    public String influenced_by() {
        return generateId("influenced_by");
    }

    /**
     *  
     * <p>
     * stronger version of influences? 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBOL#OBOL_gives_rise_to">OBOL:gives_rise_to</a> 
     */
    public String gives_rise_to() {
        return generateId("gives_rise_to");
    }

    /**
     *  
     * <p>
     * merge with OBO_REL:influences? 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_occurs_with">OBO_REL:occurs_with</a> 
     */
    public String occurs_with() {
        return generateId("occurs_with");
    }

    /**
     * A relation between a process and a continuant, where the continuant plays the role of the entity that is changed by that process. Instance: p acts_on c: exists Quality q, Time t and q inheres_in c at t, such that the continual unfolding of p results_in changes in q or maintenance of q; Type: all pP, exists cCt such that p acts_on c 
     * <p>
     * DEPRECATED Examples: Organismal growth acts_on organism; neuron migration acts_on neuron; 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBOL#OBOL_acts_on">OBOL:acts_on</a> 
     */
    public String acts_on() {
        return generateId("acts_on");
    }

    /**
     *  
     * <p>
     * DEPRECATED may be deprecated in favour of acts_on 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBOL#OBOL_has_central_participant">OBOL:has_central_participant</a> 
     */
    public String has_central_participant() {
        return generateId("has_central_participant");
    }

    /**
     * This is a class-level relation only. If P acts_on_population_of C, then: for all instances p of P, there exists some cp, t such that c instantiates CP at t, p has_central_participant cp, and CP is equivalent to population_of(C). For example: T-cell_proliferation acts_on_population_of T-cell - for all instances of T-cell_proliferation have a population of T-cells as central_participants 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBOL#OBOL_acts_on_population_of">OBOL:acts_on_population_of</a> 
     */
    public String acts_on_population_of() {
        return generateId("acts_on_population_of");
    }

    /**
     * p has_result c iff exists c' such that c derives_form c', c' exists at end of p, c' does not exist at beginning of p, c' participates_in p. Type: P has_result C iff for all pP, exists c such that p has_result c 
     * <p>
     * DEPRECATED 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBOL#OBOL_has_result">OBOL:has_result</a> 
     */
    public String has_result() {
        return generateId("has_result");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBOL#OBOL_has_output_participant">OBOL:has_output_participant</a> 
     */
    public String has_output_participant() {
        return generateId("has_output_participant");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBOL#OBOL_has_input_participant">OBOL:has_input_participant</a> 
     */
    public String has_input_participant() {
        return generateId("has_input_participant");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBOL#OBOL_has_passive_participant">OBOL:has_passive_participant</a> 
     */
    public String has_passive_participant() {
        return generateId("has_passive_participant");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBOL#OBOL_has_specific_outcome">OBOL:has_specific_outcome</a> 
     */
    public String has_specific_outcome() {
        return generateId("has_specific_outcome");
    }

    /**
     * p has_enabler c iff c is required for the unfolding of p, and c is not consumed by p. Type: P has_enabler C iff for all pP, exists c such that p has_enabler c 
     * <p>
     * consider: OBO_REL:has_enabler 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_enabler">OBO_REL:has_enabler</a> 
     */
    public String has_enabler() {
        return generateId("has_enabler");
    }

    /**
     * Instance level, between C/P and DC: x edf y iff x specified_by gx and gx transmitted_from gy and gy specifies y 
     * <p>
     * Organism parts and organismal development is specified_by genetic information; 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_generically_specified_by">OBO_REL:generically_specified_by</a> 
     */
    public String specified_by() {
        return generateId("generically_specified_by");
    }

    /**
     * Instance level: x edf y iff x specified_by gx and gx transmitted_from gy and gy specifies y 
     * <p>
     * Hox genetic information species Development 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_generically_specifies">OBO_REL:generically_specifies</a> 
     */
    public String specifies() {
        return generateId("generically_specifies");
    }

    /**
     * x dco y iff  
     * <p>
     * copies may be perfect, partial, incomplete, erroneous. Examples: the relation between two strands of DNA, post-mitosis; or between strand1 and strand2+strand3 post-meiosis. Counterexamples: A human hand and the hand of a direct progenitor (it is the physical specification of the hand that is copied - unless we are Lamarkian 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_direct_copy_of">OBO_REL:direct_copy_of</a> 
     */
    public String direct_copy_of() {
        return generateId("direct_copy_of");
    }

    /**
     * x aco y iff x dco y OR x aco z and z aco y 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_ancestral_copy_of">OBO_REL:ancestral_copy_of</a> 
     */
    public String ancestral_copy_of() {
        return generateId("ancestral_copy_of");
    }

    /**
     * Instance 3-ary relation: x edf y as T iff x specified_by gx and gx ancestral_copy_of gy and gy specifies y 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_evolutionarily_derived_from">OBO_REL:evolutionarily_derived_from</a> 
     */
    public String evolutionarily_derived_from() {
        return generateId("evolutionarily_derived_from");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_variant_of">OBO_REL:variant_of</a> 
     */
    public String variant_of() {
        return generateId("variant_of");
    }

    /**
     *  
     * <p>
     * merge with variant_of? 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_contains_variant_of">OBO_REL:contains_variant_of</a> 
     */
    public String contains_variant_of() {
        return generateId("contains_variant_of");
    }

    /**
     * U valid_for_taxon T: for ALL species in taxon T, U is a feature found in SOME organism of that species. up-propagates in U hierachy. down-propagates in T hierarchy (species taxonomy) 
     * <p>
     * Examples: sucking behavior valid_for Mammalia (and trivially valid for Metazoa, Eukaryota). Counter-examples: GO:0031987 locomotion during locomotory behavior is not valid for Viridiplantae, because there are species of green plants that never locomote during locomotory behavior 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_valid_for_taxon">OBO_REL:valid_for_taxon</a> 
     */
    public String valid_for_taxon() {
        return generateId("valid_for_taxon");
    }

    /**
     * U only_in T: U is a feature found in only in organisms of species of taxon T. the feature cannot be found in an organism of any species outside of (not subsumed by) that taxon. down-propagates in U hierarchy, up-propagates in T hierarchy (species taxonomy). Implies applicable_to_taxon 
     * <p>
     * down-propagates. The original name for this in the paper is 'specific_to'. GO:0001967 suckling behavior is specific to the taxon Mammalia, because no organisms other than mammals suckle (we believe). (The term is also trivially specific to the taxon Metazoa, because no organisms other than animals suckle.)  Likewise, GO:0048046 apoplast is specific to Viridiplantae, because only plant cells have apoplasts (as far as we know). On the other hand, the term GO:0042711 maternal behavior is not specific to the taxon Mammalia, because many animals other than mammals demonstrate maternal behavior. Likewise, GO:0005576 extracellular region (of which apoplast is a child term) is not specific to Viridiplantae, because many organisms other than green plants have extracellular regions within their bodies. 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_only_in_taxon">OBO_REL:only_in_taxon</a> 
     */
    public String only_in_taxon() {
        return generateId("only_in_taxon");
    }

    /**
     * U relevant_for_taxon T: U is found in SOME organisms for SOME species in taxon T. up-propagates in U, up-propagates in T hierarchy 
     * <p>
     * GO:0035188 hatching is relevant for the taxon Mammalia, because there are mammals that hatch - Monotremes (Monotremata, an order-ranked taxon under Mammalia) lay eggs, and presumably hatch as well. Hatching is neither valid for nor specific to Mammalia 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_applicable_to_taxon">OBO_REL:applicable_to_taxon</a> 
     */
    public String applicable_to_taxon() {
        return generateId("applicable_to_taxon");
    }

    /**
     * C has_output C' 
     * <p>
     * Examples: secretory cells. Should this be has_function (export of ...) 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_output">OBO_REL:has_output</a> 
     */
    public String has_output() {
        return generateId("has_output");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_regulated_by">OBO_REL:regulated_by</a> 
     */
    public String regulated_by() {
        return generateId("regulated_by");
    }

    /**
     * A relation between a process and a process or quality. A regulates B if the unfolding of A affects the frequency, rate or extent of B. A is called the regulating process, B the regulates process 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_regulates">OBO_REL:regulates</a> 
     */
    public String regulates() {
        return generateId("regulates");
    }

    /**
     * A regulation relation in which the unfolding of the regulating process *increases* the frequency, rate or extent of the regulated process 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_positively_regulates">OBO_REL:positively_regulates</a> 
     */
    public String positively_regulates() {
        return generateId("positively_regulates");
    }

    /**
     * A regulation relation in which the unfolding of the regulating process *decreases* the frequency, rate or extent of the regulated process 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_negatively_regulates">OBO_REL:negatively_regulates</a> 
     */
    public String negatively_regulates() {
        return generateId("negatively_regulates");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_regulates_timing_of">OBO_REL:regulates_timing_of</a> 
     */
    public String regulates_timing_of() {
        return generateId("regulates_timing_of");
    }

    /**
     * P results_in_acquisition_of_features_of C : P is_a process in which a participant acquires the qualities of a C. Formally: forall pP exists C' such that C transformation_of C', exists c such that c instantiates C' at start-of P and c instantiates C' at end-of P 
     * <p>
     * Example: Sertoli cell differentiation : The process whereby a relatively unspecialized cell acquires specialized structural and/or functional features of a Sertoli cell 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_acquisition_of_features_of">OBO_REL:results_in_acquisition_of_features_of</a> 
     */
    public String results_in_acquisition_of_features_of() {
        return generateId("results_in_acquisition_of_features_of");
    }

    /**
     *  
     * <p>
     * consider: OBO_REL:results_in_formation_of 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_creation_of">OBO_REL:results_in_creation_of</a> 
     */
    public String results_in_creation_of() {
        return generateId("results_in_creation_of");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_specification_of">OBO_REL:results_in_specification_of</a> 
     */
    public String results_in_specification_of() {
        return generateId("results_in_specification_of");
    }

    /**
     *  
     * <p>
     * Example: sperm nuclear envelope removal : Removal of the sperm nuclear envelope, allowing entry of maternal factors into the sperm nucleus 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_removal_of">OBO_REL:results_in_removal_of</a> 
     */
    public String results_in_removal_of() {
        return generateId("results_in_removal_of");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_removal_from">OBO_REL:results_in_removal_from</a> 
     */
    public String results_in_removal_from() {
        return generateId("results_in_removal_from");
    }

    /**
     *  
     * <p>
     * Example: mRNA polyadenylation results_in_addition_of polyAtail to mRNA 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_addition_to">OBO_REL:results_in_addition_to</a> 
     */
    public String results_in_addition_to() {
        return generateId("results_in_addition_to");
    }

    /**
     *  
     * <p>
     * Example: mRNA polyadenylation results_in_addition_of polyAtail to mRNA 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_addition_of">OBO_REL:results_in_addition_of</a> 
     */
    public String results_in_addition_of() {
        return generateId("results_in_addition_of");
    }

    /**
     * P results_in_formation_of C : any instance of P gives rise to a C from the parts of C. Formally: forall pP, exists some c such that c instantiates C at end-of p, and c has some parts c1, c2, ... such that the parts are connected at the end-of p and disconected at the start-of p 
     * <p>
     * Example: autophagic vacuole formation results_in_formation_of autophagic vacuole. macromolecular complex assembly results_in_formation_of a macromolecule. Note: essentially the same as biosynthesis, although in biosynthesis the assembly is via chemical reactions 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_formation_of">OBO_REL:results_in_formation_of</a> 
     */
    public String results_in_formation_of() {
        return generateId("results_in_formation_of");
    }

    /**
     * P results_in_developmental_progression_of C : any instance of P spans part of the development of some C. Formally: forall pP, p part_of some P', and P' results_in_complete_development_of C 
     * <p>
     * Example: nerve maturation = a developmental maturation that results in the developmental progression of a nerve. contrast with results_in_complete_development_of. 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_developmental_progression_of">OBO_REL:results_in_developmental_progression_of</a> 
     */
    public String results_in_developmental_progression_of() {
        return generateId("results_in_developmental_progression_of");
    }

    /**
     * A relation between a process type P and a continuant type C, such that any instance of Pp has as outcome the progression of an instance of Cc, from the formation of c to the maturation of c 
     * <p>
     * Example: oenocyte development results_in_complete_development_of oenocyte. The process whose specific outcome is the progression of the oenocyte over time, from its formation to the mature structure. The oenocytes are large secretory cells found in clusters underlying the epidermis of larval abdominal segments. contrast with results_in_developmental_progression_of. P results_in_complete_development_of C only if a single instance of P *spans* the subprocesses formation of C through to maturation of C. each of those subprocesses results_in_developmental_progression_of C 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_complete_development_of">OBO_REL:results_in_complete_development_of</a> 
     */
    public String results_in_complete_development_of() {
        return generateId("results_in_complete_development_of");
    }

    /**
     * P results_in_division_of C : any instance of C (c1) divides giving rise to two continuants c2 and c3 of type C' and C''. C' derives_from C, C'' derives_from C 
     * <p>
     * guard mother cell cytokinesis results_in_division_of guard mother cell : The stereotyped symmetric cell division by which guard mother cell give rise to stomatal guard cells. 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_division_of">OBO_REL:results_in_division_of</a> 
     */
    public String results_in_division_of() {
        return generateId("results_in_division_of");
    }

    /**
     * P results_in_fusion_of C : two instances of C (c1, c2) join together to become a single instance c of C' over the course of any P. C' derives_from C 
     * <p>
     * guard mother cell cytokinesis results_in_division_of guard mother cell : The stereotyped symmetric cell division by which guard mother cell give rise to stomatal guard cells. 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_fusion_of">OBO_REL:results_in_fusion_of</a> 
     */
    public String results_in_fusion_of() {
        return generateId("results_in_fusion_of");
    }

    /**
     *  
     * <p>
     * see: neuron remodeling, bone remodeling, tissue remodeling. This is a placeholder relation; defs that use this should be changed to state exactly what happens in the remodeling 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_remodeling_of">OBO_REL:results_in_remodeling_of</a> 
     */
    public String results_in_remodeling_of() {
        return generateId("results_in_remodeling_of");
    }

    /**
     * P results_in_increase_in Q : any P has some participant cC, such that c has_quality qQ, and the magnitude of q at start_of p > magnitude of q at end of p 
     * <p>
     * elevation of cytosolic calcium ion concentration results_in_increase_in concentration of calcium ions 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_increase_in">OBO_REL:results_in_increase_in</a> 
     */
    public String results_in_increase_in() {
        return generateId("results_in_increase_in");
    }

    /**
     * P results_in_decrease_in Q : any P has some participant cC, such that c has_quality qQ, and the magnitude of q at start_of p < magnitude of q at end of p 
     * <p>
     * reduction of cytosolic calcium ion concentration results_in_decrease_in concentration of calcium ions 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_decrease_in">OBO_REL:results_in_decrease_in</a> 
     */
    public String results_in_decrease_in() {
        return generateId("results_in_decrease_in");
    }

    /**
     * P results_in_increase_in_mass_of C : any P has some participant cC, such that c has_quality q and q instantiates PATO:mass, and the magnitude of q at start_of p < magnitude of q at end of p 
     * <p>
     * DEPRECATED 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_increase_in_mass_of">OBO_REL:results_in_increase_in_mass_of</a> 
     */
    public String results_in_increase_in_mass_of() {
        return generateId("results_in_increase_in_mass_of");
    }

    /**
     * P results_in_localization_of C : **TODO** - compare and contrast with maintenance of localization, and transportation 
     * <p>
     * nuclear pore localization results_in_localization_of nuclear pore : The processes by which nuclear pores are transported to, or maintained in, a specific location. 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_localization_of">OBO_REL:results_in_localization_of</a> 
     */
    public String results_in_localization_of() {
        return generateId("results_in_localization_of");
    }

    /**
     * P results_in_movement_of C : forall pP, there exists some cC such that location_of(c) at start_of(P) NOT= location_of(c) at end_of(P) 
     * <p>
     * Example: dendritic cell chemotaxis results_in_movement_of dendritic cell : The movement of a dendritic cell in response to an external stimulus 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_movement_of">OBO_REL:results_in_movement_of</a> 
     */
    public String results_in_movement_of() {
        return generateId("results_in_movement_of");
    }

    /**
     *  
     * <p>
     * Example: B cell selection :  process dependent upon B cell antigen receptor signaling in response to self or foreign antigen through which B cells are selected for survival. Placeholder relation. Perhaps better done using a more basic genus term? 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_selection_of">OBO_REL:results_in_selection_of</a> 
     */
    public String results_in_selection_of() {
        return generateId("results_in_selection_of");
    }

    /**
     *  
     * <p>
     * Example: B cell selection :  process dependent upon B cell antigen receptor signaling in response to self or foreign antigen through which B cells are selected for survival. Placeholder relation. Perhaps better done using a more basic genus term? 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_negative_selection_of">OBO_REL:results_in_negative_selection_of</a> 
     */
    public String results_in_negative_selection_of() {
        return generateId("results_in_negative_selection_of");
    }

    /**
     *  
     * <p>
     * Example: B cell selection :  process dependent upon B cell antigen receptor signaling in response to self or foreign antigen through which B cells are selected for survival. Placeholder relation. Perhaps better done using a more basic genus term? 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_positive_selection_of">OBO_REL:results_in_positive_selection_of</a> 
     */
    public String results_in_positive_selection_of() {
        return generateId("results_in_positive_selection_of");
    }

    /**
     * P results_in_structural_change_to C : forall pP, there is some instance c of C such that c has some structural quality at start_of p that changes over the course of p 
     * <p>
     * nuclear envelope disassembly results_in_structural_change_to nuclear envelope : The controlled breakdown of the nuclear envelope in the context of a normal process 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_structural_change_to">OBO_REL:results_in_structural_change_to</a> 
     */
    public String results_in_structural_change_to() {
        return generateId("results_in_structural_change_to");
    }

    /**
     * P results_in_transport_from C : forall pP, there exists some c' such that located_in C at start_of(p) and not(c' located_in C at end_of(p)) 
     * <p>
     * Example: ovarian nurse cell to oocyte transport : results_in_transport_from nurse cell. Transfer of constituents synthesized in the ovarian nurse cells to the oocyte, through the ring canals, as the egg chamber is growing. 'multi-stops' are counted as separate processes 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_transport_from">OBO_REL:results_in_transport_from</a> 
     */
    public String results_in_transport_from() {
        return generateId("results_in_transport_from");
    }

    /**
     * P results_in_transport_to C : forall pP, there exists some c' such that located_in C at end_of(p) and not(c' located_in C at start_of(p)) 
     * <p>
     * Example: ovarian nurse cell to oocyte transport : results_in_transport_to oocyte. Transfer of constituents synthesized in the ovarian nurse cells to the oocyte, through the ring canals, as the egg chamber is growing. Note: a single process can only result_in_transport_to a single end location. 'multi-stops' are counted as separate processes 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_transport_to">OBO_REL:results_in_transport_to</a> 
     */
    public String results_in_transport_to() {
        return generateId("results_in_transport_to");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_transport_through">OBO_REL:results_in_transport_through</a> 
     */
    public String results_in_transport_through() {
        return generateId("results_in_transport_through");
    }

    /**
     * P unfolds_in C : the execution of P is spatially contained by C. forall pP,  forall c' partipates_in p, c' located_in C at t, for some t in P 
     * <p>
     * Example: oocyte axis determination : The establishment, maintenance and elaboration of an axis in the oocyte. This process unfolds_in the oocyte 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_unfolds_in">OBO_REL:unfolds_in</a> 
     */
    public String unfolds_in() {
        return generateId("unfolds_in");
    }

    /**
     * P unfolds_around C : the execution of P spatially contains by C. 
     * <p>
     * Example: chromatin silencing at centromere unfolds_around centromere : Repression of transcription of centromeric DNA by the formation of heterochromatin. 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_unfolds_around">OBO_REL:unfolds_around</a> 
     */
    public String unfolds_around() {
        return generateId("unfolds_around");
    }

    /**
     * P results_in_closure_of C : forall pP exists cC such that a topological change occurs in c, whereby two parts of c, c1 and c2 become connected 
     * <p>
     * Example: neural tube closure results_in_closure_of neural tube. 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_closure_of">OBO_REL:results_in_closure_of</a> 
     */
    public String results_in_closure_of() {
        return generateId("results_in_closure_of");
    }

    /**
     * p results_in_release_of a : exists b, a located_in b at t1, and not(a located_in b) at t2, where start_of(p)=t1 and end_of(p)=t2 
     * <p>
     * Example: basophil degranulation results_in_release_of secretory granule: The regulated exocytosis of secretory granules containing preformed mediators such as histamine, serotonin, and neutral proteases by a basophil. Serotonin secretion. Parturition. 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_release_of">OBO_REL:results_in_release_of</a> 
     */
    public String results_in_release_of() {
        return generateId("results_in_release_of");
    }

    /**
     * p results_in_release_from b : exists a, a located_in b at t1, and not(a located_in b) at t2, where start_of(p)=t1 and end_of(p)=t2 
     * <p>
     * Example: basophil degranulation results_in_release_from basophil: The regulated exocytosis of secretory granules containing preformed mediators such as histamine, serotonin, and neutral proteases by a basophil 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_release_from">OBO_REL:results_in_release_from</a> 
     */
    public String results_in_release_from() {
        return generateId("results_in_release_from");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_death_of">OBO_REL:results_in_death_of</a> 
     */
    public String results_in_death_of() {
        return generateId("results_in_death_of");
    }

    /**
     *  
     * <p>
     * consider: OBO_REL:results_in_connection_of 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_attachment_of">OBO_REL:results_in_attachment_of</a> 
     */
    public String results_in_attachment_of() {
        return generateId("results_in_attachment_of");
    }

    /**
     *  
     * <p>
     * consider: OBO_REL:results_in_connection_of 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_adhesion_to">OBO_REL:results_in_adhesion_to</a> 
     */
    public String results_in_adhesion_to() {
        return generateId("results_in_adhesion_to");
    }

    /**
     * P results_in_connection_of C1, P results_in_connection_of C2 : forall pP, at the end of p, there is some c1, c2 such that c1C1 and c2C2 and c1 connected_to c2, and c1 not connected_to c2 at the end of p 
     * <p>
     * cell-matrix adhesion results_in_connection_of a cell AND results_in_connection_of a matrix. Note that it would be more convenient if we could make n-ary relations, cell-matrix adhesion results_in connection of matrix to cell; however, we must work with binary relations, so we create a single relation statement for every entity that becomes attached during the process 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_results_in_connection_of">OBO_REL:results_in_connection_of</a> 
     */
    public String results_in_connection_of() {
        return generateId("results_in_connection_of");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_inactivates">OBO_REL:inactivates</a> 
     */
    public String inactivates() {
        return generateId("inactivates");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_develops_into">OBO_REL:develops_into</a> 
     */
    public String develops_into() {
        return generateId("develops_into");
    }

    /**
     *  
     * <p>
     * Example: process of providing, via surface-bound receptor-ligand pairs, a second, antigen-independent, signal in addition to that provided by the T cell receptor to augment T cell activation. NOTES: this is a placeholder relation; GO should define the basic genus terms necessary here 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_costimulates_activation_of">OBO_REL:costimulates_activation_of</a> 
     */
    public String costimulates_activation_of() {
        return generateId("costimulates_activation_of");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_stimulates">OBO_REL:stimulates</a> 
     */
    public String stimulates() {
        return generateId("stimulates");
    }

    /**
     *  
     * <p>
     * Necessary for 'time-sliced' representations. Examples: this eye at t1 subslice_of this eye during its entire existence 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_subslice_of">OBO_REL:subslice_of</a> 
     */
    public String subslice_of() {
        return generateId("subslice_of");
    }

    /**
     *  
     * <p>
     * Sourced from BIRN. Domain: bfo:ObjectAggregate 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_aggregate_part">OBO_REL:has_aggregate_part</a> 
     */
    public String has_aggregate_part() {
        return generateId("has_aggregate_part");
    }

    /**
     *  
     * <p>
     * Sourced from BIRN. Range: bfo:ObjectBoundary 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_boundary">OBO_REL:has_boundary</a> 
     */
    public String has_boundary() {
        return generateId("has_boundary");
    }

    /**
     * The relation that holds between a process or a processual entity and the length of the temporal interval between its beginning and its end. 
     * <p>
     * Submitted by Liju Fan (OBI) 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_duration">OBO_REL:has_duration</a> 
     */
    public String has_duration() {
        return generateId("has_duration");
    }

    /**
     *  
     * <p>
     * The requirements are for a relation between a quality and some kind of comparative modifiers. This could be seen as a reified relation; e.g. 'abnormal shape'. Currently the qualifier terms such as 'abnormal' live in PATO 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_has_qualifier">OBO_REL:has_qualifier</a> 
     */
    public String has_qualifier() {
        return generateId("has_qualifier");
    }

    /**
     *  
     * <p>
     * a relation between two qualities. We assume a primitive magnitude function mg(q,U) => Number. q1 increased_in_magnitude_compared_to q2 at t <=> mg(q1,U) > mg(q2,U). 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_increased_in_magnitude_compared_to">OBO_REL:increased_in_magnitude_compared_to</a> 
     */
    public String increased_in_magnitude_compared_to() {
        return generateId("increased_in_magnitude_compared_to");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_decreased_in_magnitude_compared_to">OBO_REL:decreased_in_magnitude_compared_to</a> 
     */
    public String decreased_in_magnitude_compared_to() {
        return generateId("decreased_in_magnitude_compared_to");
    }

    /**
     *  
     * <p>
     * required for defining classes such as 'ratio of root length to root shoot' 
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_relative_to">OBO_REL:relative_to</a> 
     */
    public String relative_to() {
        return generateId("relative_to");
    }

    /**
     * Two objects are connected if they share a fiat boundary 
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_overlaps">OBO_REL:overlaps</a> 
     */
    public String overlaps() {
        return generateId("overlaps");
    }

    /**
     *  
     * <p>
     *  
     * <p>
     * @see <a href="http://purl.org/obo/owl/OBO_REL#OBO_REL_interacts_with">OBO_REL:interacts_with</a> 
     */
    public String interacts_with() {
        return generateId("interacts_with");
    }
}

