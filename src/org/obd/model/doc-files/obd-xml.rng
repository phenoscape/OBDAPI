<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <start>
    <a:documentation>default namespace = "http://www.purl.org/obo/obd/schema/obd-generic"</a:documentation>
    <a:documentation>Can be viewed as alternate serialisation of RDF
 Rationale:
  - ease of use with XML processors
  - directly realisation of RDFS and OWL properties in classes in the XML schema
  - ease of use with nested/structured data field
    (general rule: annotation properties to non-literals get nested in the xml)
  - built-in support for reification, which is required for science
    (eg publication X states that gene A has_function B)
    can also be used for qualified, contextual links (eg time)
  - simpler layering of OWL class-level relations that is more akin
    to the OBO relations model, the oboedit model and databases like Chado
  - the need to identify and name different graphs
    see also: http://www.w3.org/2004/03/trix/Overview.html
</a:documentation>
    <choice>
      <ref name="Graph">
        <a:documentation>A document typically starts with a Graph within which nodes
and statements can be embedded. A node or statement can also
be at the top level.</a:documentation>
      </ref>
      <ref name="Node"/>
      <ref name="Nodes"/>
      <ref name="Statement"/>
      <ref name="Statements"/>
    </choice>
  </start>
  <define name="Graph">
    <element name="Graph">
      <a:documentation>A graph is simply a holder for Nodes and Statements.
Nodes represent instances, types or relations, and the
edges of the graph are statements concerning these Nodes.

Statement elements can be nested under the Graph element
or under a Node element. Semantically there is no difference
between these alternate structures.</a:documentation>
      <interleave>
        <zeroOrMore>
          <ref name="Node"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="Statement"/>
        </zeroOrMore>
      </interleave>
    </element>
  </define>
  <define name="Nodes">
    <element name="Nodes">
      <zeroOrMore>
        <ref name="Node"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="Statements">
    <element name="Statements">
      <zeroOrMore>
        <ref name="Statement"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="Statement">
    <choice>
      <ref name="LinkStatement"/>
      <ref name="LiteralStatement"/>
      <ref name="UnaryPropertyStatement"/>
    </choice>
  </define>
  <define name="Statement_Attrs">
    <a:documentation>A statement is some proposition, relation one or more entities via a predicate.
Examples: John loves Mary, all cell nucleus part_of cell, p53 participates_in DNA_Repair

Within the structure of the document, 
Statements can be nested beneath the nodes which they relate, or they can be nested 
underneath the Graph node. These are semantically identical. Clients may request one
form or another from servers in order to process them more easily.
For example: if a client requests all statements pertaining to the node for "holoprosencephaly",
the server may return these statements at the top level. However, all the nodes related to
holoprosencephaly node in this statement set may have additional metadata attached as LiteralStatements
at the node level

corresponds to an RDF triple, or in some cases, a bundle of triples
-- more accurately, corresponds to an OWL axiom, or fact</a:documentation>
    <interleave>
      <optional>
        <attribute name="id">
          <ref name="identifier_Type"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="isInferred">
          <a:documentation>by default, links are asserted rather than inferred
example of inferred link: X is_a Z, inferred from X is_a Y, Y is_a Z</a:documentation>
          <data type="boolean"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="is_object_reified">
          <a:documentation>most links are between nodes (default)
a link can also point to another link - in this
case we say the object is a reified link, in
accordance with RDF terminology</a:documentation>
          <data type="boolean"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="isNegated">
          <a:documentation>if true, the statement does not hold</a:documentation>
          <data type="boolean"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="appliesToAllInstancesOf">
          <a:documentation>true if the node is a class, and the statements is
true for ALL instances of this class</a:documentation>
          <data type="boolean"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="hasIntersectionSemantics">
          <a:documentation>true if this statement is one of a collection of statements for this node
that, when combined, give necessary and sufficient conditions
via intersectionOf</a:documentation>
          <data type="boolean"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="hasUnionSemantics">
          <a:documentation>true if this statement is one of a collection of statements for this node
that, when combined, give necessary and sufficient conditions
via unionOf</a:documentation>
          <data type="boolean"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="hasEquivalenceSemantics">
          <a:documentation>EquivalentClass(node,target) - if node is a class and appliesToAllInstancesOf
EquivalentProperty(node,target) - if node is a relation
SameAs(node,target) - otherwise</a:documentation>
          <data type="boolean"/>
        </attribute>
      </optional>
      <optional>
        <element name="InstanceQuantifier">
          <a:documentation>applicable to class nodes only: determines how this statement relates instances
of this class</a:documentation>
          <interleave>
            <optional>
              <attribute name="isExistential">
                <a:documentation>if true, this link is treated as a
SubClassOf(Restriction(rel,someValuesFrom(target))) axiom</a:documentation>
                <data type="boolean"/>
              </attribute>
            </optional>
            <optional>
              <attribute name="isUniversal">
                <a:documentation>if true, this link is treated as a
SubClassOf(Restriction(rel,allValuesFrom(target))) axiom</a:documentation>
                <data type="boolean"/>
              </attribute>
            </optional>
            <optional>
              <attribute name="minCardinality">
                <a:documentation>if set, this link is treated as a
SubClassOf(Restriction(rel,minCardinality(n,target))) axiom</a:documentation>
                <data type="int"/>
              </attribute>
            </optional>
            <optional>
              <attribute name="maxCardinality">
                <a:documentation>if set, this link is treated as a
SubClassOf(Restriction(rel,maxCardinality(n,target))) axiom</a:documentation>
                <data type="int"/>
              </attribute>
            </optional>
          </interleave>
        </element>
      </optional>
    </interleave>
  </define>
  <define name="Statement_Elts">
    <optional>
      <element name="node">
        <a:documentation>subject node, to which this statement applies</a:documentation>
        <ref name="linkref"/>
      </element>
    </optional>
    <element name="relation">
      <a:documentation>predicate node: the relationship type</a:documentation>
      <ref name="linkref"/>
    </element>
    <optional>
      <element name="positedBy">
        <a:documentation>for annotation statements: the annotation node that posits this statement
partially redundant with sub-statements, below</a:documentation>
        <ref name="linkref"/>
      </element>
    </optional>
    <optional>
      <element name="source">
        <a:documentation>where the statement comes from</a:documentation>
        <ref name="linkref"/>
      </element>
    </optional>
    <optional>
      <element name="context">
        <a:documentation>the statement applies when the node is in this context. TODO</a:documentation>
        <ref name="linkref"/>
      </element>
    </optional>
    <zeroOrMore>
      <ref name="Statement">
        <a:documentation>sub-statements; can be used to attach properties/metadata to the Statement</a:documentation>
      </ref>
    </zeroOrMore>
  </define>
  <define name="LinkStatement">
    <element name="LinkStatement">
      <a:documentation>A statement connecting two nodes
Examples: p53 participates_in DNA_Repair</a:documentation>
      <interleave>
        <optional>
          <attribute name="isEquivalentTo">
            <a:documentation>true if the predicate is one of equivalence.
for class nodes, owl:equivalentClass
for relation nodes, owl:equivalentProperty</a:documentation>
            <data type="boolean"/>
          </attribute>
        </optional>
        <!-- - - inherit generic statement attributes - - -->
        <ref name="Statement_Attrs"/>
        <optional>
          <attribute name="isEquivalent">
            <a:documentation>link provides an *equivalent class*, or a *class definition*</a:documentation>
            <data type="boolean"/>
          </attribute>
        </optional>
        <optional>
          <attribute name="isXref">
            <data type="boolean"/>
          </attribute>
        </optional>
        <optional>
          <attribute name="isReflexive">
            <a:documentation>true if the Node and Target are identical</a:documentation>
            <data type="boolean"/>
          </attribute>
        </optional>
        <!-- - - inherit generic statement elements - - -->
        <ref name="Statement_Elts"/>
        <element name="target">
          <a:documentation>the target node to which the node is being related to
Example: p53 participates_in DNA_Repair (DNA_Repair is target)</a:documentation>
          <ref name="linkref"/>
        </element>
      </interleave>
    </element>
  </define>
  <define name="LiteralStatement">
    <element name="LiteralStatement">
      <a:documentation>A statement relating a node to some DatatypeProperty
Examples: comments, descriptions, aliases.
for LiteralStatemens between an class node and a literal: SubClassOf(Restriction(pred,hasValue(VALUE))
for LiteralStatemens between an instance node and a literal: fact/triple</a:documentation>
      <interleave>
        <optional>
          <attribute name="isAlias">
            <data type="boolean"/>
          </attribute>
        </optional>
        <optional>
          <attribute name="isTextDefinition">
            <data type="boolean"/>
          </attribute>
        </optional>
        <ref name="Statement_Attrs"/>
        <ref name="Statement_Elts"/>
        <element name="value">
          <ref name="literal"/>
        </element>
      </interleave>
    </element>
  </define>
  <define name="UnaryPropertyStatement">
    <element name="LiteralStatement">
      <a:documentation>A zero-argument about a node.
Example: Transitive(partOf)
Example: Transitive(partOf)
combine with isNegated to state that a property does not hold</a:documentation>
      <interleave>
        <optional>
          <attribute name="isTransitive">
            <data type="boolean"/>
          </attribute>
        </optional>
        <ref name="Statement_Attrs"/>
        <ref name="Statement_Elts"/>
      </interleave>
    </element>
  </define>
  <define name="linkref">
    <attribute name="about">
      <ref name="identifier_Type"/>
    </attribute>
    <optional>
      <!-- the node can optionally be embedded -->
      <ref name="Node"/>
    </optional>
  </define>
  <define name="Node">
    <element name="Node">
      <a:documentation>equivalent to an RDF resource. can represent instances, relations/slots and universals</a:documentation>
      <interleave>
        <attribute name="id">
          <a:documentation>A unique identifier for the Node. </a:documentation>
          <ref name="identifier_Type"/>
        </attribute>
        <optional>
          <attribute name="metatype">
            <a:documentation>Change to enum? </a:documentation>
            <choice>
              <value>class</value>
              <value>relation</value>
              <value>instance</value>
            </choice>
          </attribute>
        </optional>
        <optional>
          <attribute name="isAnonymous">
            <a:documentation>corresponds to rdf bNode</a:documentation>
            <data type="boolean"/>
          </attribute>
        </optional>
        <optional>
          <attribute name="isObsolete">
            <a:documentation>true if the authority publishing this resource has retired the ID</a:documentation>
            <data type="boolean"/>
          </attribute>
        </optional>
        <optional>
          <attribute name="isTransitive">
            <a:documentation>relations only. corresponds to owl:TransitiveProperty</a:documentation>
            <data type="boolean"/>
          </attribute>
        </optional>
        <optional>
          <element name="label">
            <a:documentation>corresponds to rdfs:label</a:documentation>
            <ref name="literal"/>
          </element>
        </optional>
        <optional>
          <element name="source">
            <a:documentation>if this node is from an ontology, the id of the ontology
if the node is from a dataset, the id/name of the dataset</a:documentation>
            <ref name="linkref"/>
          </element>
        </optional>
        <optional>
          <element name="compositionalDescription">
            <ref name="linkref"/>
          </element>
        </optional>
        <zeroOrMore>
          <ref name="Statement">
            <a:documentation>axiom style - can embed statements</a:documentation>
          </ref>
        </zeroOrMore>
      </interleave>
    </element>
  </define>
  <define name="CompositionalDescription">
    <element name="CompositionalDescription">
      <a:documentation>same as a Descriptin in owl :
aka Logical Definition, cross-product, class expression.
A recursive construct for composing descriptions of entities using
logical connectives, classes and relations.
Note that this is purely a convenience class: a CompositionalDescription is 
semantically equivalent to a collection of link statements with intersection or union
semantics

Example:
The SO class SO:0000634 polycistronic_mRNA is composed from SO:0000234 "mRNA" and
SO:0000880 "polycistonic".
This is written in OWL syntax as:
Intersection( SO:0000234 restriction(has_quality someValuesFrom( SO:0000880 )  ))
The OBDXML looks like this:

&lt;CompositionalDescription predicate="INTERSECTION"&gt;
&lt;CompositionalDescription predicate="RESTRICTION"&gt;
  &lt;restriction&gt;
   &lt;LinkStatement appliesToAllInstancesOf="true" hasIntersectionSemantics="true"&gt;
   &lt;node about="SO:0000634"/&gt;
   &lt;relation about="has_quality"/&gt;
   &lt;target about="SO:0000880"/&gt;
   &lt;source about="sequence"/&gt;
   &lt;/LinkStatement&gt;
 &lt;/restriction&gt;
   &lt;Atom&gt;
SO:0000880  &lt;/Atom&gt;
&lt;/CompositionalDescription&gt;
 &lt;Atom&gt;
SO:0000234 &lt;/Atom&gt;
&lt;/CompositionalDescription&gt;
&lt;/pre&gt;</a:documentation>
      <interleave>
        <optional>
          <attribute name="about">
            <ref name="identifier_Type"/>
          </attribute>
        </optional>
        <attribute name="predicate">
          <choice>
            <value>INTERSECTION</value>
            <value>UNION</value>
            <value>COMPLEMENT</value>
            <value>RESTRICTION</value>
            <value>ATOM</value>
          </choice>
        </attribute>
        <optional>
          <element name="label">
            <ref name="literal"/>
          </element>
        </optional>
        <optional>
          <element name="restriction">
            <a:documentation>only valid if this is of predicate RESTRICTION; points to a statement that must
be true of this description</a:documentation>
            <ref name="Statement"/>
          </element>
        </optional>
        <zeroOrMore>
          <ref name="CompositionalDescription">
            <a:documentation>arguments
has zero arguments if this of predicate ATOM</a:documentation>
          </ref>
        </zeroOrMore>
      </interleave>
    </element>
  </define>
  <define name="literal">
    <optional>
      <attribute name="datatype">
        <a:documentation>Datatype value</a:documentation>
        <a:documentation>Literal value type. Type should be drawn from XSD datatypes
eg xsd:string, xsd:number</a:documentation>
        <ref name="identifier_Type"/>
      </attribute>
    </optional>
    <data type="string">
      <a:documentation>the literal value
Example: "abcd"
Example: 42
Example: 1.41</a:documentation>
    </data>
  </define>
  <define name="identifier_Type">
    <data type="string"/>
  </define>
  <define name="label_Type">
    <data type="string"/>
  </define>
</grammar>
