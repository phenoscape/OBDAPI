<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
  <xs:element name="Graph">
    <xs:annotation>
      <xs:documentation>A graph is simply a holder for Nodes and Statements.
Nodes represent instances, types or relations, and the
edges of the graph are statements concerning these Nodes.

Statement elements can be nested under the Graph element
or under a Node element. Semantically there is no difference
between these alternate structures.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="Node"/>
        <xs:group ref="Statement"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="Nodes">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="Node"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Statements">
    <xs:complexType>
      <xs:group minOccurs="0" maxOccurs="unbounded" ref="Statement"/>
    </xs:complexType>
  </xs:element>
  <xs:group name="Statement">
    <xs:choice>
      <xs:element ref="LinkStatement"/>
      <xs:group ref="LiteralStatement"/>
      <xs:group ref="UnaryPropertyStatement"/>
    </xs:choice>
  </xs:group>
  <xs:group name="Statement_Attrs">
    <xs:annotation>
      <xs:documentation>A statement is some proposition, relation one or more entities via a predicate.
Examples: John loves Mary, all cell nucleus part_of cell, p53 participates_in DNA_Repair

Within the structure of the document, 
Statements can be nested beneath the nodes which they relate, or they can be nested 
underneath the Graph node. These are semantically identical. Clients may request one
form or another from servers in order to process them more easily.
For example: if a client requests all statements pertaining to the node for "holoprosencephaly",
the server may return these statements at the top level. However, all the nodes related to
holoprosencephaly node in this statement set may have additional metadata attached as LiteralStatements
at the node level

corresponds to an RDF triple, or in some cases, a bundle of triples
-- more accurately, corresponds to an OWL axiom, or fact</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="InstanceQuantifier"/>
    </xs:sequence>
  </xs:group>
  <xs:element name="InstanceQuantifier">
    <xs:annotation>
      <xs:documentation>applicable to class nodes only: determines how this statement relates instances
of this class</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="isExistential" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>if true, this link is treated as a
SubClassOf(Restriction(rel,someValuesFrom(target))) axiom</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="isUniversal" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>if true, this link is treated as a
SubClassOf(Restriction(rel,allValuesFrom(target))) axiom</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="minCardinality" type="xs:int">
        <xs:annotation>
          <xs:documentation>if set, this link is treated as a
SubClassOf(Restriction(rel,minCardinality(n,target))) axiom</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="maxCardinality" type="xs:int">
        <xs:annotation>
          <xs:documentation>if set, this link is treated as a
SubClassOf(Restriction(rel,maxCardinality(n,target))) axiom</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Statement_Attrs">
    <xs:annotation>
      <xs:documentation>A statement is some proposition, relation one or more entities via a predicate.
Examples: John loves Mary, all cell nucleus part_of cell, p53 participates_in DNA_Repair

Within the structure of the document, 
Statements can be nested beneath the nodes which they relate, or they can be nested 
underneath the Graph node. These are semantically identical. Clients may request one
form or another from servers in order to process them more easily.
For example: if a client requests all statements pertaining to the node for "holoprosencephaly",
the server may return these statements at the top level. However, all the nodes related to
holoprosencephaly node in this statement set may have additional metadata attached as LiteralStatements
at the node level

corresponds to an RDF triple, or in some cases, a bundle of triples
-- more accurately, corresponds to an OWL axiom, or fact</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="identifier_Type"/>
    <xs:attribute name="isInferred" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>by default, links are asserted rather than inferred
example of inferred link: X is_a Z, inferred from X is_a Y, Y is_a Z</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="is_object_reified" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>most links are between nodes (default)
a link can also point to another link - in this
case we say the object is a reified link, in
accordance with RDF terminology</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isNegated" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>if true, the statement does not hold</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appliesToAllInstancesOf" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>true if the node is a class, and the statements is
true for ALL instances of this class</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hasIntersectionSemantics" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>true if this statement is one of a collection of statements for this node
that, when combined, give necessary and sufficient conditions
via intersectionOf</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hasUnionSemantics" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>true if this statement is one of a collection of statements for this node
that, when combined, give necessary and sufficient conditions
via unionOf</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hasEquivalenceSemantics" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>EquivalentClass(node,target) - if node is a class and appliesToAllInstancesOf
EquivalentProperty(node,target) - if node is a relation
SameAs(node,target) - otherwise</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:group name="Statement_Elts">
    <xs:sequence>
      <xs:element minOccurs="0" ref="node"/>
      <xs:element ref="relation"/>
      <xs:element minOccurs="0" ref="positedBy"/>
      <xs:element minOccurs="0" ref="source"/>
      <xs:element minOccurs="0" ref="context"/>
      <xs:group minOccurs="0" maxOccurs="unbounded" ref="Statement">
        <xs:annotation>
          <xs:documentation>sub-statements; can be used to attach properties/metadata to the Statement</xs:documentation>
        </xs:annotation>
      </xs:group>
    </xs:sequence>
  </xs:group>
  <xs:element name="node" type="linkref">
    <xs:annotation>
      <xs:documentation>subject node, to which this statement applies</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="relation" type="linkref">
    <xs:annotation>
      <xs:documentation>predicate node: the relationship type</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="positedBy" type="linkref">
    <xs:annotation>
      <xs:documentation>for annotation statements: the annotation node that posits this statement
partially redundant with sub-statements, below</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="source" type="linkref">
    <xs:annotation>
      <xs:documentation>where the statement comes from</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="context" type="linkref">
    <xs:annotation>
      <xs:documentation>the statement applies when the node is in this context. TODO</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="LinkStatement">
    <xs:annotation>
      <xs:documentation>A statement connecting two nodes
Examples: p53 participates_in DNA_Repair</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="Statement_Attrs"/>
        <xs:choice>
          <xs:element ref="node"/>
          <xs:element ref="relation"/>
          <xs:element ref="positedBy"/>
          <xs:element ref="source"/>
          <xs:element ref="context"/>
          <xs:group ref="Statement">
            <xs:annotation>
              <xs:documentation>sub-statements; can be used to attach properties/metadata to the Statement</xs:documentation>
            </xs:annotation>
          </xs:group>
        </xs:choice>
        <xs:element ref="target"/>
      </xs:choice>
      <xs:attribute name="isEquivalentTo" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>true if the predicate is one of equivalence.
for class nodes, owl:equivalentClass
for relation nodes, owl:equivalentProperty</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="Statement_Attrs"/>
      <xs:attribute name="isEquivalent" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>link provides an *equivalent class*, or a *class definition*</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="isXref" type="xs:boolean"/>
      <xs:attribute name="isReflexive" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>true if the Node and Target are identical</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="target" type="linkref">
    <xs:annotation>
      <xs:documentation>the target node to which the node is being related to
Example: p53 participates_in DNA_Repair (DNA_Repair is target)</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:group name="LiteralStatement">
    <xs:sequence>
      <xs:element name="LiteralStatement">
        <xs:annotation>
          <xs:documentation>A statement relating a node to some DatatypeProperty
Examples: comments, descriptions, aliases.
for LiteralStatemens between an class node and a literal: SubClassOf(Restriction(pred,hasValue(VALUE))
for LiteralStatemens between an instance node and a literal: fact/triple</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="Statement_Attrs"/>
            <xs:choice>
              <xs:element ref="node"/>
              <xs:element ref="relation"/>
              <xs:element ref="positedBy"/>
              <xs:element ref="source"/>
              <xs:element ref="context"/>
              <xs:group ref="Statement">
                <xs:annotation>
                  <xs:documentation>sub-statements; can be used to attach properties/metadata to the Statement</xs:documentation>
                </xs:annotation>
              </xs:group>
            </xs:choice>
            <xs:element ref="value"/>
          </xs:choice>
          <xs:attribute name="isAlias" type="xs:boolean"/>
          <xs:attribute name="isTextDefinition" type="xs:boolean"/>
          <xs:attributeGroup ref="Statement_Attrs"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:element name="value" type="literal"/>
  <xs:group name="UnaryPropertyStatement">
    <xs:sequence>
      <xs:element name="LiteralStatement">
        <xs:annotation>
          <xs:documentation>A zero-argument about a node.
Example: Transitive(partOf)
Example: Transitive(partOf)
combine with isNegated to state that a property does not hold</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="Statement_Attrs"/>
            <xs:choice>
              <xs:element ref="node"/>
              <xs:element ref="relation"/>
              <xs:element ref="positedBy"/>
              <xs:element ref="source"/>
              <xs:element ref="context"/>
              <xs:group ref="Statement">
                <xs:annotation>
                  <xs:documentation>sub-statements; can be used to attach properties/metadata to the Statement</xs:documentation>
                </xs:annotation>
              </xs:group>
            </xs:choice>
          </xs:choice>
          <xs:attribute name="isTransitive" type="xs:boolean"/>
          <xs:attributeGroup ref="Statement_Attrs"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:complexType name="linkref">
    <xs:sequence>
      <xs:element minOccurs="0" ref="Node"/>
    </xs:sequence>
    <xs:attribute name="about" use="required" type="identifier_Type"/>
  </xs:complexType>
  <xs:element name="Node">
    <xs:annotation>
      <xs:documentation>equivalent to an RDF resource. can represent instances, relations/slots and universals</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="label" type="literal">
          <xs:annotation>
            <xs:documentation>corresponds to rdfs:label</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="source" type="linkref">
          <xs:annotation>
            <xs:documentation>if this node is from an ontology, the id of the ontology
if the node is from a dataset, the id/name of the dataset</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="compositionalDescription"/>
        <xs:group ref="Statement">
          <xs:annotation>
            <xs:documentation>axiom style - can embed statements</xs:documentation>
          </xs:annotation>
        </xs:group>
      </xs:choice>
      <xs:attribute name="id" use="required" type="identifier_Type">
        <xs:annotation>
          <xs:documentation>A unique identifier for the Node. </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="metatype">
        <xs:annotation>
          <xs:documentation>Change to enum? </xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="class"/>
            <xs:enumeration value="relation"/>
            <xs:enumeration value="instance"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="isAnonymous" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>corresponds to rdf bNode</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="isObsolete" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>true if the authority publishing this resource has retired the ID</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="isTransitive" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>relations only. corresponds to owl:TransitiveProperty</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="compositionalDescription" type="linkref"/>
  <xs:element name="CompositionalDescription">
    <xs:annotation>
      <xs:documentation>same as a Descriptin in owl :
aka Logical Definition, cross-product, class expression.
A recursive construct for composing descriptions of entities using
logical connectives, classes and relations.
Note that this is purely a convenience class: a CompositionalDescription is 
semantically equivalent to a collection of link statements with intersection or union
semantics

Example:
The SO class SO:0000634 polycistronic_mRNA is composed from SO:0000234 "mRNA" and
SO:0000880 "polycistonic".
This is written in OWL syntax as:
Intersection( SO:0000234 restriction(has_quality someValuesFrom( SO:0000880 )  ))
The OBDXML looks like this:

&lt;CompositionalDescription predicate="INTERSECTION"&gt;
&lt;CompositionalDescription predicate="RESTRICTION"&gt;
  &lt;restriction&gt;
   &lt;LinkStatement appliesToAllInstancesOf="true" hasIntersectionSemantics="true"&gt;
   &lt;node about="SO:0000634"/&gt;
   &lt;relation about="has_quality"/&gt;
   &lt;target about="SO:0000880"/&gt;
   &lt;source about="sequence"/&gt;
   &lt;/LinkStatement&gt;
 &lt;/restriction&gt;
   &lt;Atom&gt;
SO:0000880  &lt;/Atom&gt;
&lt;/CompositionalDescription&gt;
 &lt;Atom&gt;
SO:0000234 &lt;/Atom&gt;
&lt;/CompositionalDescription&gt;
&lt;/pre&gt;</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="label" type="literal"/>
        <xs:element ref="restriction"/>
        <xs:element ref="CompositionalDescription">
          <xs:annotation>
            <xs:documentation>arguments
has zero arguments if this of predicate ATOM</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
      <xs:attribute name="about" type="identifier_Type"/>
      <xs:attribute name="predicate" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="INTERSECTION"/>
            <xs:enumeration value="UNION"/>
            <xs:enumeration value="COMPLEMENT"/>
            <xs:enumeration value="RESTRICTION"/>
            <xs:enumeration value="ATOM"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="restriction">
    <xs:annotation>
      <xs:documentation>only valid if this is of predicate RESTRICTION; points to a statement that must
be true of this description</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:group ref="Statement"/>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="literal">
    <xs:simpleContent>
      <xs:restriction base="xs:anyType">
        <xs:simpleType>
          <xs:restriction base="xs:string"/>
        </xs:simpleType>
        <xs:attribute name="datatype" type="identifier_Type">
          <xs:annotation>
            <xs:documentation>Datatype value</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:simpleContent>
  </xs:complexType>
  <xs:simpleType name="identifier_Type">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="label_Type">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
</xs:schema>
