#!/usr/bin/swipl -L0 -G0 -A0 -T0 -q -g main -t halt -s

:- use_module(library('thea2/owl2_io')).
:- use_module(library('thea2/owl2_model')).
:- use_module(library('thea2/owl2_plsyn')).
:- use_module(library('thea2/owl2_instance_util')).
:- use_module(library('thea2/owl2_basic_reasoner')).
:- use_module(library('semweb/rdf_db')).
:- use_module(bio(ontol_manifest_metadata_from_nif_via_thea)).

:- rdf_register_ns('OBO_REL','http://www.obofoundry.org/ro/ro.owl#').

:- [birn_phenotype_templates].
:- [obo_util].

main :-
        current_prolog_flag(argv, Arguments),
        append(_SytemArgs, [--|Files], Arguments), !,
        set_prolog_flag(verbose,normal),
        debug(owl2_bench),
        format('default-namespace: pkb_xp_specific~n~n',[]),
        forall(member(File,Files),
               load_axioms(File,_,[])),
        forall(ce_template(CE) where Constr,
               write_filled_template(CE,Constr)),
        tell('foo.owlpl'),
        forall(ce_template(CE) where Constr,
               write_filled_template_owlpl(CE,Constr)),
        told.


write_filled_template(CE1,Constr) :-
        plsyn_owl(CE1,CE),
        %setof(CE,I^ece(CE,I,Constr),CEs),
        setof(I-CE,ece(CE,I,Constr),ICEs),
        setof(CE,I^member(I-CE,ICEs),CEs),
        setof(I,CE^member(I-CE,ICEs),Is),
        maplist(write_stanza,CEs),
        maplist(write_inst_stanza(ICEs),Is).

write_filled_template_owlpl(CE1,Constr) :-
        plsyn_owl(CE1,CE),
        setof(CE,I^ece(CE,I,Constr),CEs),
        maplist(write_owlpl_ec,CEs).

write_inst_stanza(ICEs,I) :-
        setof(CE,member(I-CE,ICEs),CEs),
        !,
        ce_id(I,IX),
        format('[Instance]~n'),
        format('id: ~w~n',[IX]),
        forall(member(CE,CEs),
               (   ce_id(CE,CEX),
                   format('instance_of: ~w~n',[CEX]))),
        nl.
write_inst_stanza(_,_).

        
        
ece(C,I,Constr) :-
        ece(C,I),
        Constr.
ece(C,I) :- classAssertion(C,I).
ece(C,I) :- nonvar(C),ece1(C,I).

ece1(intersectionOf([D|DL]),I) :-
        ece(D,I),
        ece(intersectionOf(DL),I).
ece1(intersectionOf([D]),I) :-
        ece(D,I).
ece1(someValuesFrom(P,D),I) :-
        propertyAssertion(P,I,J),
        ece(D,J).
ece1(someValuesFrom(P,D),I) :-
        inverseProperties(P,Q),
        propertyAssertion(Q,J,I),
        ece(D,J).

    
write_owlpl_ec(CE) :-
        ce_id(CE,ID),
        atom_concat('http://x.org#',ID,URI),
        format('~q.~n',[equivalentClasses([URI,CE])]).


