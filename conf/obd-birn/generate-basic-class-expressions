#!/usr/bin/swipl -L0 -G0 -A0 -T0 -q -g main -t halt -s

:- use_module(library('thea2/owl2_io')).
:- use_module(library('thea2/owl2_model')).
:- use_module(library('thea2/owl2_plsyn')).
:- use_module(library('thea2/owl2_instance_util')).
:- use_module(library('thea2/owl2_basic_reasoner')).
:- use_module(library('semweb/rdf_db')).
:- use_module(bio(ontol_manifest_metadata_from_nif_via_thea)).

:- rdf_register_ns('OBO_REL','http://www.obofoundry.org/ro/ro.owl#').

:- [birn_phenotype_templates].

main :-
        current_prolog_flag(argv, Arguments),
        append(_SytemArgs, [--|Files], Arguments), !,
        set_prolog_flag(verbose,normal),
        debug(owl2_bench),
        forall(member(File,Files),
               load_axioms(File,_,[])),
        forall(ce_template(CE) where Constr,
               write_filled_template(CE,Constr)),
        tell('foo.owlpl'),
        forall(ce_template(CE) where Constr,
               write_filled_template_owlpl(CE,Constr)),
        told.


write_filled_template(CE1,Constr) :-
        plsyn_owl(CE1,CE),
        setof(CE,I^ece(CE,I,Constr),CEs),
        maplist(write_stanza,CEs).

write_filled_template_owlpl(CE1,Constr) :-
        plsyn_owl(CE1,CE),
        setof(CE,I^ece(CE,I,Constr),CEs),
        maplist(write_owlpl_ec,CEs).

ece(C,I,Constr) :-
        ece(C,I),
        Constr.
ece(C,I) :- classAssertion(C,I).
ece(C,I) :- nonvar(C),ece1(C,I).

ece1(intersectionOf([D|DL]),I) :-
        ece(D,I),
        ece(intersectionOf(DL),I).
ece1(intersectionOf([D]),I) :-
        ece(D,I).
ece1(someValuesFrom(P,D),I) :-
        propertyAssertion(P,I,J),
        ece(D,J).
ece1(someValuesFrom(P,D),I) :-
        inverseProperties(P,Q),
        propertyAssertion(Q,J,I),
        ece(D,J).

    
write_owlpl_ec(CE) :-
        ce_id(CE,ID),
        atom_concat('http://x.org#',ID,URI),
        format('~q.~n',[equivalentClasses([URI,CE])]).


write_stanza(CE) :-
        CE=intersectionOf(DL),
        select(Genus,DL,DL2),
        atom(Genus),
        format('[Term]~n'),
        ce_id(CE,ID),
        format('id: ~w~n',[ID]),
        ce_id(Genus,GenusID),
        format('intersection_of: ~w~n',[GenusID]),
        forall(member(someValuesFrom(P,D),DL2),
               (   ce_id(P,PropID),
                   ce_id(D,DID),
                   format('intersection_of: ~w ~w~n',[PropID,DID]))),
        nl,
        !.
write_stanza(CE) :-
        format(user_error,'cannot write ~w~n',[CE]).

ce_id(intersectionOf(DL),ID) :-
        !,
        findall(DID,(member(D,DL),ce_id(D,DID)),DIDs),
        concat_atom(DIDs,'^',ID).
ce_id(someValuesFrom(P,D),ID) :-
        !,
        ce_id(P,PID),
        ce_id(D,DID),
        sformat(ID,'~w(~w)',[PID,DID]).
ce_id(inverseOf(P),PID) :-
        !,
        ce_id(P,PID1),
        atom_concat(PID1,'-inv',PID).
ce_id(URI,ID) :-
        urimap(URI,URI2),
        !,
        ce_id(URI2,ID).
ce_id(URI,ID) :-
        atom(URI),
        rdf_global_id(NS:Local,URI),
        !,
        concat_atom([NS,Local],':',ID).
ce_id(X,X).

urimap('http://purl.org/obo/owl/obo#towards','OBO_REL:towards').
urimap('http://purl.org/obo/owl/obo#inheres_in','OBO_REL:inheres_in').


        
        
